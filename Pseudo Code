Scenarios
1. Tight Curves
2. Tight Angles (30 degrees < Angle < 90 degrees)
3. Perpendicular (Angle == 90 degrees)
4. Large Angles (90 degrees < Angle)
5. Gaps (should be able to include this in the code in 1-4)
6. Nearby trails

Note: (30 degrees < Angles) when the robot is required to turn
due to the lack of rotational control with the sumo-bots at
extremely tight angles.

#######################################FILE: MAIN.C#######################################

// int Threshold = x; // Threshold of the inked line
int Threshold = 410; // Threshold of the tape

int Timer = 0; // Global variable so that StartTimer(); and DifferentialValue(); c
// manipulate this variable

// To start the timer if the outer or middle LEDs fall into the threshold
StartTimer();

// To help identify the delay between two points in order for the sumo-bot
// to act accordingly
DifferentialValue();

// To determine what angle the sumo-bot encounters
int TightAngle = 0;
int LargeAngle = 0;

// To determine which direction the sumo-bot should move
int Left = 0;
int Right = 0;

while (1)

################################0. Straight Line###############################

while (LED3 == 1 && LED1,2,4,5 == 0) // When only LED3 is on

	Move forward

################################1. Tight curves################################

Insert code here or below
	
####################################LEFT TURN###################################

if (LED3,1 == 1 && LED2,4,5 == 0) // When only LED1 and LED3 are on

	###########2. Tight Angles (30 degrees < Angle < 90 degrees)##########
	if (TightAngles == 0 && LargeAngles == 0) // This means that the sumo-bot will now identify the track change 
						// as a tight angle turn
		Left = 1;
		TightAngles = 1;
		StartTimer(); // Starts a timer

	#########################6. Nearby trails#############################		
	else if (TightAngle1 == 1 && LargeAngles == 0) // This means that the sumo-bot will identify that there is
							// a nearby track
		**Code used for nearby tracks*

	####0########4. Large Angles (90 degrees < Angle)#####################	

	else if (TightAngles == 0 && LargeAngles == 1)
	
		Left = 0;
		LargeAngles = 0;
		DifferentialValue();
		MoveSumoBotAccordingly

if (LED3,2 == 1 && LED1,4,5 == 0) // When only LED2 and LED3 are on

	###########2. Tight Angles (30 degrees < Angle < 90 degrees)##########
	if (TightAngles == 1 && LargeAngles == 0) // This means that the sumo-bot will now identify the track change 
						// as a tight angle turn
		Left = 0;
		TightAngles = 0;
		DifferentialValue();
		MoveSumoBotAccordingly

	#########################6. Nearby trails#############################		
	else if (TightAngles == 0 && LargeAngles == 1) // This means that the sumo-bot will identify that there is
							// a nearby track
		**Code used for nearby tracks**

	#############4. Large Angles (90 degrees < Angle)#####################	

	else if (TightAngles == 1 && LargeAngles == 0)
	
		Left = 1;
		LargeAngles = 1;
		StartTimer(); // Starts a timer
		
####################################RIGHT TURN###################################

if (LED3,5 == 1 && LED2,4,1 == 0) // When only LED1 and LED3 are on

	###########2. Tight Angles (30 degrees < Angle < 90 degrees)##########
	if (TightAngles == 0 && LargeAngles == 0) // This means that the sumo-bot will now identify the track change 
						// as a tight angle turn
		Right = 1;
		TightAngles = 1;
		StartTimer(); // Starts a timer

	#########################6. Nearby trails#############################		
	else if (TightAngles == 1 && LargeAngles == 0) // This means that the sumo-bot will identify that there is
							// a nearby track
		**Code used for nearby tracks**

	#############4. Large Angles (90 degrees < Angle)#####################	

	else if (TightAngles == 0 && LargeAngles == 1)
	
		Right = 0;
		LargeAngles = 0;
		DifferentialValue();
		MoveSumoBotAccordingly

if (LED3,4 == 1 && LED1,2,5 == 0) // When only LED4 and LED3 are on

	###########2. Tight Angles (30 degrees < Angle < 90 degrees)##########
	if (TightAngles == 1 && LargeAngles == 0) // This means that the sumo-bot will now identify the track change 
						// as a tight angle turn
		Right = 0;
		TightAngles = 0;
		DifferentialValue();
		MoveSumoBotAccordingly

	#########################6. Nearby trails#############################		
	else if (TightAngles == 0 && LargeAngles == 1) // This means that the sumo-bot will identify that there is
							// a nearby track
		**Code used for nearby tracks**

	#############4. Large Angles (90 degrees < Angle)#####################	

	else if (TightAngles == 1 && LargeAngles == 0)
	
		Right = 1;
		LargeAngles = 1;
		StartTimer(); // Starts a timer
		
####################3. Perpendicular (Angle == 90 degrees)###################

if (LED1,2,3 == 1 && LED4,5 == 0)
	Move sumo-bot left 90 degrees
if (LED3,4,5 == 1 && LED1,2 == 0)
	Move sumo-bot right 90 degrees

##########5. Gaps (should be able to include this in the code in 1-4)########
Insert code here or fixes above

######################7. Dead end track and finish line######################
while (LED1,2,3,4,5 == 0)
	StartTimer();
	if (Timer == *8 cm value*)
		Rotate sumo-bot 180 degrees
while (LED1,2,3,4,5 == 1)
	StartTimer();
	if (Timer == *3 cm(example) value*)
		Stop sumo-bot and dance


Preliminary Ideas

If LED 3 = 1 then LED 2 = 1, rotate robot left, if LED 3 =1 then LED 5 = 1 rotate robot right

If LED 1, 2, 3 = 1 then rotate robot 90, if LED 3, 4, 5 =1 then rotate robot 90

If LED 1, 3 = 1 then rotate robot 120, if LED 3, 5 = 1 
and then all LED = 0 then rotate robot 120
else robot continues moving forward

If LED 1, 2, 3, 4, 5, =1 then continue moving forward
	if LED 1, 2, 3,4 ,5 = 1 for 8 seconds then stop and dance

If all LED = 0 then continue moving for 8 cm, if LED = 0 still, rotate robot 180 degrees
