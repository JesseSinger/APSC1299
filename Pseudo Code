Scenarios

Note: (30 degrees < Angles) when the robot is required to turn
due to the lack of rotational control with the sumo-bots at
extremely tight angles.

// int Threshold = x; // Threshold of the inked line
int Threshold = 410; // Threshold of the tape

// To help identify the delay between two points in order for the sum-bot
// to act accordingly
// This should change to a prototype, depending on the value
// will help measure how far of an angle the sumo-bot will rotate
int DifferentialValue = 0; 

1. Tight curves

2. Tight Angles (30 degrees < Angle < 90 degrees)

3. Perpendicular (Angle == 90 degrees)

4. Large Angles (90 degrees < Angle)

5. Gaps (should be able to include this in the code in 1-4)

6. Nearby trails

7. Dead end track and finish line




Preliminary Ideas

If LED 3 = 1 then LED 2 = 1, rotate robot left, if LED 3 =1 then LED 5 = 1 rotate robot right

If LED 1, 2, 3 = 1 then rotate robot 90, if LED 3, 4, 5 =1 then rotate robot 90

If LED 1, 3 = 1 then rotate robot 120, if LED 3, 5 = 1 
and then all LED = 0 then rotate robot 120
else robot continues moving forward

If LED 1, 2, 3, 4, 5, =1 then continue moving forward
	if LED 1, 2, 3,4 ,5 = 1 for 8 seconds then stop and dance

If all LED = 0 then continue moving for 8 cm, if LED = 0 still, rotate robot 180 degrees
